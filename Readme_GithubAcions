GitHub Actions CI/CD Pipeline (GitHub Hosted Workflow)

Step 1: Launch and Prepare One EC2 Instance
Use the AWS Console:
Launch 1 Ubuntu EC2
Open ports 22, 5000, 5001 in security group
Use .pem key for SSH


Step 2: SSH and Install Requirements
ssh -i your-key.pem ubuntu@<your-ec2-ip>
sudo apt update
sudo apt install -y python3-pip python3-venv git


Step 3: Clone Repo Twice (Staging & Prod)
cd ~
git clone https://github.com/your-username/flask.git flask-staging-app
git clone https://github.com/your-username/flask.git flask-prod-app


Step 4: Setup Virtual Environments & Install
Do for both folders:
cd ~/flask-staging-app
python3 -m venv venv
source venv/bin/activate
pip install flask gunicorn
pip freeze > requirements.txt
pip install -r requirements.txt


Step 5: Create Two systemd Services
app.py in ~/flask-staging-app
Sudo nano app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return '👋 Hello from Staging Environment!'


🟡 Staging - flask-staging.service
sudo nano /etc/systemd/system/flask-staging.service
Paste:
[Unit]
Description=Gunicorn for Flask Staging App
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/flask-staging-app
Environment="PATH=/home/ubuntu/flask-staging-app/venv/bin"
ExecStart=/home/ubuntu/flask-staging-app/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 app:app
Restart=always

[Install]
WantedBy=multi-user.target


🔴 Production - flask-prod.service
app.py in ~/flask-prod-app
Sudo nano app.py

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello from Production!'


sudo nano /etc/systemd/system/flask-prod.service
Paste:
[Unit]
Description=Gunicorn for Flask Production App
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/flask-prod-app
Environment="PATH=/home/ubuntu/flask-prod-app/venv/bin"
ExecStart=/home/ubuntu/flask-prod-app/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:5001 app:app
Restart=always

[Install]
WantedBy=multi-user.target


Then run:
sudo systemctl daemon-reload
sudo systemctl start flask-staging
sudo systemctl enable flask-staging

sudo systemctl start flask-prod
sudo systemctl enable flask-prod



Test:
Visit http://<EC2-IP>:5000 → staging
Visit http://<EC2-IP>:5001 → prod


Step 6: Add GitHub Secrets
In your GitHub repo → Settings > Secrets and variables > Actions, add:
Name
Value
EC2_HOST
Public IP of your EC2
EC2_USER
ubuntu
SSH_PRIVATE_KEY
Contents of your .pem file


Step 7: Update Workflow YAML
Edit .github/workflows/ci-cd.yml:
name: Flask CI/CD

on:
  push:
    branches:
      - main
      - staging
  release:
    types: [published]

jobs:
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found, skipping pip install."
          fi

  run-tests:
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "⚠️ requirements.txt not found, skipping pip install."
          fi

      - name: Run tests
        run: |
          pytest tests/ || echo "⚠️ No tests found or tests failed."

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/flask-staging-app
            git pull origin staging
            source venv/bin/activate
            pip install -r requirements.txt
            sudo systemctl restart flask-staging

  deploy-production:
    if: github.event_name == 'release'
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/flask-prod-app
            git pull origin main
            source venv/bin/activate
            pip install -r requirements.txt
            sudo systemctl restart flask-prod



push to staging → deploys to port 5000
create release from main → deploys to port 5001



TESTING THE PIPELINE — Step-by-Step Guide
You will test two flows:
Staging Flow: Triggered on push to staging branch


Production Flow: Triggered on GitHub release from main branch


TEST 1: Push to Staging Branch
1. Make a change in staging branch
On your local machine:
git checkout staging
echo "# Test from staging" >> README.md
git add README.md
git commit -m "Test: Update README for staging"
git push origin staging


2. Check GitHub Actions
Go to your GitHub repo → Actions
You should see a new workflow triggered
It will run:
Install dependencies
Run tests
SSH to EC2
Pull latest code into flask-staging-app
Restart flask-staging service


3. Visit Staging App
Go to:
http://<EC2-IP>:5000
Check that your change (e.g., new README) is reflected.



TEST 2: Create a Production Release
1. Merge changes from staging to main
On your local machine:
git checkout main
git merge staging
git push origin main

2. Create a Release on GitHub
Go to your repo → Releases → Draft a new release
Tag version: v1
Target: main branch
Name :Initial Production Release 1
Click Publish release

3. Check GitHub Actions
A workflow should be triggered under Actions
It will:
Install dependencies
Run tests
SSH to EC2
Pull code to flask-prod-app
Restart flask-prod service

4. Visit Production App
Go to:
cpp
http://<EC2-IP>:5001
